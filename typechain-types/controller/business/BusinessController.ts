/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type BusinessApplyStruct = {
  id: PromiseOrValue<BigNumberish>;
  employeeId: PromiseOrValue<BigNumberish>;
  businessId: PromiseOrValue<BigNumberish>;
  postId: PromiseOrValue<BigNumberish>;
  time: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
};

export type BusinessApplyStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  employeeId: BigNumber;
  businessId: BigNumber;
  postId: BigNumber;
  time: BigNumber;
  status: BigNumber;
};

export type BusinessAppointmentStruct = {
  id: PromiseOrValue<BigNumberish>;
  businessApplyId: PromiseOrValue<BigNumberish>;
  employeeId: PromiseOrValue<BigNumberish>;
  businessId: PromiseOrValue<BigNumberish>;
  time: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
};

export type BusinessAppointmentStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  businessApplyId: BigNumber;
  employeeId: BigNumber;
  businessId: BigNumber;
  time: BigNumber;
  status: BigNumber;
};

export type BusinessPostStruct = {
  id: PromiseOrValue<BigNumberish>;
  businessId: PromiseOrValue<BigNumberish>;
  hashTag: PromiseOrValue<string>;
  time: PromiseOrValue<BigNumberish>;
  content: PromiseOrValue<string>;
  imageSource: PromiseOrValue<string>;
  job: PromiseOrValue<string>;
  status: PromiseOrValue<BigNumberish>;
};

export type BusinessPostStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  string,
  string,
  number
] & {
  id: BigNumber;
  businessId: BigNumber;
  hashTag: string;
  time: BigNumber;
  content: string;
  imageSource: string;
  job: string;
  status: number;
};

export type ProfileStruct = {
  category: PromiseOrValue<BigNumberish>;
  id: PromiseOrValue<BigNumberish>;
  user: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  phone: PromiseOrValue<string>;
  professional: PromiseOrValue<string>;
  email: PromiseOrValue<string>;
  github: PromiseOrValue<string>;
  linkedin: PromiseOrValue<string>;
  sourceImage: PromiseOrValue<string>;
};

export type ProfileStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  category: BigNumber;
  id: BigNumber;
  user: string;
  name: string;
  phone: string;
  professional: string;
  email: string;
  github: string;
  linkedin: string;
  sourceImage: string;
};

export interface BusinessControllerInterface extends utils.Interface {
  functions: {
    "_checkApplyIdBelongsToEmployeeId(uint256,uint256)": FunctionFragment;
    "_checkExistApply(uint256,uint256)": FunctionFragment;
    "_checkExistBusinessAccount()": FunctionFragment;
    "_checkIdBelongsToPostId(uint256,uint256)": FunctionFragment;
    "_checkPostIdBelongstoBusinessId(uint256,uint256)": FunctionFragment;
    "addAppointment(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addBusiness(uint256,string,string,string,string,string,string,string)": FunctionFragment;
    "addPost(uint256,string,string,string,string,uint8)": FunctionFragment;
    "destroy()": FunctionFragment;
    "getAllApplies()": FunctionFragment;
    "getAllAppointments()": FunctionFragment;
    "getAllPosts()": FunctionFragment;
    "getAllProfile()": FunctionFragment;
    "owner()": FunctionFragment;
    "setStatusPost(uint256,uint256,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_checkApplyIdBelongsToEmployeeId"
      | "_checkExistApply"
      | "_checkExistBusinessAccount"
      | "_checkIdBelongsToPostId"
      | "_checkPostIdBelongstoBusinessId"
      | "addAppointment"
      | "addBusiness"
      | "addPost"
      | "destroy"
      | "getAllApplies"
      | "getAllAppointments"
      | "getAllPosts"
      | "getAllProfile"
      | "owner"
      | "setStatusPost"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_checkApplyIdBelongsToEmployeeId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_checkExistApply",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_checkExistBusinessAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_checkIdBelongsToPostId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_checkPostIdBelongstoBusinessId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAppointment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addBusiness",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllApplies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAppointments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProfile",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setStatusPost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_checkApplyIdBelongsToEmployeeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_checkExistApply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_checkExistBusinessAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_checkIdBelongsToPostId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_checkPostIdBelongstoBusinessId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBusiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllApplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAppointments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStatusPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "eventAddPost(uint256,string,string,string,string,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventAddPost"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface eventAddPostEventObject {
  id: BigNumber;
  hashTag: string;
  job: string;
  content: string;
  imageSource: string;
  status: number;
}
export type eventAddPostEvent = TypedEvent<
  [BigNumber, string, string, string, string, number],
  eventAddPostEventObject
>;

export type eventAddPostEventFilter = TypedEventFilter<eventAddPostEvent>;

export interface BusinessController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BusinessControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _checkApplyIdBelongsToEmployeeId(
      id: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _checkExistApply(
      employeeId: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _checkExistBusinessAccount(overrides?: CallOverrides): Promise<[boolean]>;

    _checkIdBelongsToPostId(
      id: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _checkPostIdBelongstoBusinessId(
      id: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addAppointment(
      businessPostId: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      businessApplyId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBusiness(
      category: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      phone: PromiseOrValue<string>,
      professional: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      github: PromiseOrValue<string>,
      linkedin: PromiseOrValue<string>,
      sourceImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPost(
      businessId: PromiseOrValue<BigNumberish>,
      hashTag: PromiseOrValue<string>,
      job: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      imageSource: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllApplies(
      overrides?: CallOverrides
    ): Promise<[BusinessApplyStructOutput[]]>;

    getAllAppointments(
      overrides?: CallOverrides
    ): Promise<[BusinessAppointmentStructOutput[]]>;

    getAllPosts(
      overrides?: CallOverrides
    ): Promise<[BusinessPostStructOutput[]]>;

    getAllProfile(overrides?: CallOverrides): Promise<[ProfileStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setStatusPost(
      postId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _checkApplyIdBelongsToEmployeeId(
    id: PromiseOrValue<BigNumberish>,
    employeeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _checkExistApply(
    employeeId: PromiseOrValue<BigNumberish>,
    postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _checkExistBusinessAccount(overrides?: CallOverrides): Promise<boolean>;

  _checkIdBelongsToPostId(
    id: PromiseOrValue<BigNumberish>,
    postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _checkPostIdBelongstoBusinessId(
    id: PromiseOrValue<BigNumberish>,
    businessId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addAppointment(
    businessPostId: PromiseOrValue<BigNumberish>,
    employeeId: PromiseOrValue<BigNumberish>,
    businessId: PromiseOrValue<BigNumberish>,
    businessApplyId: PromiseOrValue<BigNumberish>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBusiness(
    category: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    phone: PromiseOrValue<string>,
    professional: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    github: PromiseOrValue<string>,
    linkedin: PromiseOrValue<string>,
    sourceImage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPost(
    businessId: PromiseOrValue<BigNumberish>,
    hashTag: PromiseOrValue<string>,
    job: PromiseOrValue<string>,
    content: PromiseOrValue<string>,
    imageSource: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllApplies(
    overrides?: CallOverrides
  ): Promise<BusinessApplyStructOutput[]>;

  getAllAppointments(
    overrides?: CallOverrides
  ): Promise<BusinessAppointmentStructOutput[]>;

  getAllPosts(overrides?: CallOverrides): Promise<BusinessPostStructOutput[]>;

  getAllProfile(overrides?: CallOverrides): Promise<ProfileStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  setStatusPost(
    postId: PromiseOrValue<BigNumberish>,
    businessId: PromiseOrValue<BigNumberish>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checkApplyIdBelongsToEmployeeId(
      id: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _checkExistApply(
      employeeId: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _checkExistBusinessAccount(overrides?: CallOverrides): Promise<boolean>;

    _checkIdBelongsToPostId(
      id: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _checkPostIdBelongstoBusinessId(
      id: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addAppointment(
      businessPostId: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      businessApplyId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addBusiness(
      category: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      phone: PromiseOrValue<string>,
      professional: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      github: PromiseOrValue<string>,
      linkedin: PromiseOrValue<string>,
      sourceImage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPost(
      businessId: PromiseOrValue<BigNumberish>,
      hashTag: PromiseOrValue<string>,
      job: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      imageSource: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    destroy(overrides?: CallOverrides): Promise<void>;

    getAllApplies(
      overrides?: CallOverrides
    ): Promise<BusinessApplyStructOutput[]>;

    getAllAppointments(
      overrides?: CallOverrides
    ): Promise<BusinessAppointmentStructOutput[]>;

    getAllPosts(overrides?: CallOverrides): Promise<BusinessPostStructOutput[]>;

    getAllProfile(overrides?: CallOverrides): Promise<ProfileStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    setStatusPost(
      postId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "eventAddPost(uint256,string,string,string,string,uint8)"(
      id?: null,
      hashTag?: null,
      job?: null,
      content?: null,
      imageSource?: null,
      status?: null
    ): eventAddPostEventFilter;
    eventAddPost(
      id?: null,
      hashTag?: null,
      job?: null,
      content?: null,
      imageSource?: null,
      status?: null
    ): eventAddPostEventFilter;
  };

  estimateGas: {
    _checkApplyIdBelongsToEmployeeId(
      id: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _checkExistApply(
      employeeId: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _checkExistBusinessAccount(overrides?: CallOverrides): Promise<BigNumber>;

    _checkIdBelongsToPostId(
      id: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _checkPostIdBelongstoBusinessId(
      id: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAppointment(
      businessPostId: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      businessApplyId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBusiness(
      category: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      phone: PromiseOrValue<string>,
      professional: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      github: PromiseOrValue<string>,
      linkedin: PromiseOrValue<string>,
      sourceImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPost(
      businessId: PromiseOrValue<BigNumberish>,
      hashTag: PromiseOrValue<string>,
      job: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      imageSource: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllApplies(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAppointments(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPosts(overrides?: CallOverrides): Promise<BigNumber>;

    getAllProfile(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setStatusPost(
      postId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checkApplyIdBelongsToEmployeeId(
      id: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _checkExistApply(
      employeeId: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _checkExistBusinessAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _checkIdBelongsToPostId(
      id: PromiseOrValue<BigNumberish>,
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _checkPostIdBelongstoBusinessId(
      id: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAppointment(
      businessPostId: PromiseOrValue<BigNumberish>,
      employeeId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      businessApplyId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBusiness(
      category: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      phone: PromiseOrValue<string>,
      professional: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      github: PromiseOrValue<string>,
      linkedin: PromiseOrValue<string>,
      sourceImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPost(
      businessId: PromiseOrValue<BigNumberish>,
      hashTag: PromiseOrValue<string>,
      job: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      imageSource: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllApplies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllAppointments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStatusPost(
      postId: PromiseOrValue<BigNumberish>,
      businessId: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
