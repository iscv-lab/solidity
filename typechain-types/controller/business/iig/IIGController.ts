/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type IIGLRResultStruct = {
  id: PromiseOrValue<BigNumberish>;
  employeeId: PromiseOrValue<BigNumberish>;
  testDate: PromiseOrValue<BigNumberish>;
  shiftTest: PromiseOrValue<BigNumberish>;
  expireDate: PromiseOrValue<BigNumberish>;
  listeningScore: PromiseOrValue<BigNumberish>;
  readingScore: PromiseOrValue<BigNumberish>;
  time: PromiseOrValue<BigNumberish>;
};

export type IIGLRResultStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  employeeId: BigNumber;
  testDate: BigNumber;
  shiftTest: number;
  expireDate: BigNumber;
  listeningScore: BigNumber;
  readingScore: BigNumber;
  time: BigNumber;
};

export type IIGSWResultStruct = {
  id: PromiseOrValue<BigNumberish>;
  employeeId: PromiseOrValue<BigNumberish>;
  testDate: PromiseOrValue<BigNumberish>;
  shiftTest: PromiseOrValue<BigNumberish>;
  expireDate: PromiseOrValue<BigNumberish>;
  speakingScore: PromiseOrValue<BigNumberish>;
  writingScore: PromiseOrValue<BigNumberish>;
  time: PromiseOrValue<BigNumberish>;
};

export type IIGSWResultStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  employeeId: BigNumber;
  testDate: BigNumber;
  shiftTest: number;
  expireDate: BigNumber;
  speakingScore: BigNumber;
  writingScore: BigNumber;
  time: BigNumber;
};

export interface IIGControllerInterface extends utils.Interface {
  functions: {
    "_checkExistBusinessAccount()": FunctionFragment;
    "_checkExistEmployeeAccount()": FunctionFragment;
    "addLRResult(uint256,uint256,uint8,uint256,uint256,uint256)": FunctionFragment;
    "addSWResult(uint256,uint256,uint8,uint256,uint256,uint256)": FunctionFragment;
    "destroy()": FunctionFragment;
    "getAllIIGLRResult()": FunctionFragment;
    "getAllIIGSWResult()": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_checkExistBusinessAccount"
      | "_checkExistEmployeeAccount"
      | "addLRResult"
      | "addSWResult"
      | "destroy"
      | "getAllIIGLRResult"
      | "getAllIIGSWResult"
      | "owner"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_checkExistBusinessAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_checkExistEmployeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLRResult",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSWResult",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllIIGLRResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllIIGSWResult",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_checkExistBusinessAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_checkExistEmployeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLRResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSWResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllIIGLRResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllIIGSWResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface IIGController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIGControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _checkExistBusinessAccount(overrides?: CallOverrides): Promise<[boolean]>;

    _checkExistEmployeeAccount(overrides?: CallOverrides): Promise<[boolean]>;

    addLRResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      listeningScore: PromiseOrValue<BigNumberish>,
      readingScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSWResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      speakingScore: PromiseOrValue<BigNumberish>,
      writingScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllIIGLRResult(
      overrides?: CallOverrides
    ): Promise<[IIGLRResultStructOutput[]]>;

    getAllIIGSWResult(
      overrides?: CallOverrides
    ): Promise<[IIGSWResultStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _checkExistBusinessAccount(overrides?: CallOverrides): Promise<boolean>;

  _checkExistEmployeeAccount(overrides?: CallOverrides): Promise<boolean>;

  addLRResult(
    employeeId: PromiseOrValue<BigNumberish>,
    testDate: PromiseOrValue<BigNumberish>,
    shiftTest: PromiseOrValue<BigNumberish>,
    expireDate: PromiseOrValue<BigNumberish>,
    listeningScore: PromiseOrValue<BigNumberish>,
    readingScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSWResult(
    employeeId: PromiseOrValue<BigNumberish>,
    testDate: PromiseOrValue<BigNumberish>,
    shiftTest: PromiseOrValue<BigNumberish>,
    expireDate: PromiseOrValue<BigNumberish>,
    speakingScore: PromiseOrValue<BigNumberish>,
    writingScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllIIGLRResult(
    overrides?: CallOverrides
  ): Promise<IIGLRResultStructOutput[]>;

  getAllIIGSWResult(
    overrides?: CallOverrides
  ): Promise<IIGSWResultStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checkExistBusinessAccount(overrides?: CallOverrides): Promise<boolean>;

    _checkExistEmployeeAccount(overrides?: CallOverrides): Promise<boolean>;

    addLRResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      listeningScore: PromiseOrValue<BigNumberish>,
      readingScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSWResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      speakingScore: PromiseOrValue<BigNumberish>,
      writingScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    destroy(overrides?: CallOverrides): Promise<void>;

    getAllIIGLRResult(
      overrides?: CallOverrides
    ): Promise<IIGLRResultStructOutput[]>;

    getAllIIGSWResult(
      overrides?: CallOverrides
    ): Promise<IIGSWResultStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _checkExistBusinessAccount(overrides?: CallOverrides): Promise<BigNumber>;

    _checkExistEmployeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    addLRResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      listeningScore: PromiseOrValue<BigNumberish>,
      readingScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSWResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      speakingScore: PromiseOrValue<BigNumberish>,
      writingScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllIIGLRResult(overrides?: CallOverrides): Promise<BigNumber>;

    getAllIIGSWResult(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checkExistBusinessAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _checkExistEmployeeAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLRResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      listeningScore: PromiseOrValue<BigNumberish>,
      readingScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSWResult(
      employeeId: PromiseOrValue<BigNumberish>,
      testDate: PromiseOrValue<BigNumberish>,
      shiftTest: PromiseOrValue<BigNumberish>,
      expireDate: PromiseOrValue<BigNumberish>,
      speakingScore: PromiseOrValue<BigNumberish>,
      writingScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllIIGLRResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllIIGSWResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
